[{"name":"app.R","content":"# app.R\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"Five-Judge Court Simulation\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      div(\n        id = \"prob_inputs\",\n        numericInput(\"pA\", \"Judge A Probability:\", value = 0.95, min = 0, max = 1, step = 0.01),\n        numericInput(\"pB\", \"Judge B Probability:\", value = 0.94, min = 0, max = 1, step = 0.01),\n        numericInput(\"pC\", \"Judge C Probability:\", value = 0.9, min = 0, max = 1, step = 0.01),\n        numericInput(\"pD\", \"Judge D Probability:\", value = 0.9, min = 0, max = 1, step = 0.01),\n        numericInput(\"pE\", \"Judge E Probability:\", value = 0.8, min = 0, max = 1, step = 0.01),\n        br(),\n        checkboxInput(\"retire\", \"Retire Worst Judge\", value = FALSE)\n      ),\n      \n      br(),\n      actionButton(\"simulate\", \"Simulate One Case\"),\n      actionButton(\"simulate1000\", \"Simulate 1000 Cases\"),\n      br(), br(),\n      \n      div(\n        id = \"reset_div\",\n        actionButton(\"reset\", \"Start Over\")\n      )\n    ),\n    \n    mainPanel(\n      h4(\"Simulation Results\"),\n      uiOutput(\"table_ui\"),\n      br(),\n      verbatimTextOutput(\"summaryText\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  vals <- reactiveValues(\n    total_cases = 0,\n    correct_cases = 0,\n    last_results = NULL,\n    show_table = FALSE,\n    initialized = FALSE,\n    retired_info = NULL\n  )\n  \n  # JS helper to fade UI in/out\n  toggle_elements <- function(show_inputs, show_reset) {\n    session$sendCustomMessage(\n      \"fadeElements\",\n      list(show_inputs = show_inputs, show_reset = show_reset)\n    )\n  }\n  \n  # compute retired/doubled judges when checkbox is checked\n  observe({\n    if (!input$retire) {\n      vals$retired_info <- NULL\n    } else {\n      probs <- c(input$pA, input$pB, input$pC, input$pD, input$pE)\n      print(probs)\n      max_idx <- which(probs == max(probs))\n      print(max_idx)\n      top <- ifelse(length(max_idx) == 1, max_idx, sample(max_idx, size = 1))\n      min_idx <- which(probs == min(probs))\n      print(min_idx)\n      bottom <- ifelse(length(min_idx) == 1, min_idx, sample(min_idx, size = 1))\n      print(bottom)\n      res <- list(\n        top = top,\n        bottom = bottom\n      )\n      print(res)\n      vals$retired_info <- res\n    }\n    \n  })\n  \n  # Core simulation function\n  simulate_case <- function(probs, retired_info) {\n    votes <- rbinom(5, 1, probs) == 1\n    weights <- rep(1, 5)\n    if (!is.null(retired_info)) {\n      weights[retired_info$top] <- 2\n      weights[retired_info$bottom] <- 0\n    }\n    correct_votes <- sum(votes * weights)\n    total_possible_votes <- sum(weights)\n    court_correct <- correct_votes >= (total_possible_votes / 2)\n    \n    list(votes = votes, correct_votes = correct_votes, court_correct = court_correct)\n  }\n  \n  # --- Simulate one case ---\n  observeEvent(input$simulate, {\n    probs <- c(input$pA, input$pB, input$pC, input$pD, input$pE)\n    judges <- c(\"A\", \"B\", \"C\", \"D\", \"E\")\n    retired_info <- vals$retired_info\n    \n    result <- simulate_case(probs, retired_info)\n    \n    vals$total_cases <- vals$total_cases + 1\n    if (result$court_correct) vals$correct_cases <- vals$correct_cases + 1\n    \n    vals$last_results <- data.frame(\n      Judge = judges,\n      Correct = ifelse(result$votes, \"Yes\", \"No\"),\n      stringsAsFactors = FALSE\n    )\n    vals$show_table <- TRUE\n    \n    if (!vals$initialized) {\n      toggle_elements(show_inputs = FALSE, show_reset = TRUE)\n      vals$initialized <- TRUE\n    }\n  })\n  \n  # --- Simulate 1000 cases ---\n  observeEvent(input$simulate1000, {\n    probs <- c(input$pA, input$pB, input$pC, input$pD, input$pE)\n    retired_info <- vals$retired_info\n    \n    court_correct <- 0\n    for (i in 1:1000) {\n      result <- simulate_case(probs, retired_info)\n      if (result$court_correct) court_correct <- court_correct + 1\n    }\n    \n    vals$total_cases <- vals$total_cases + 1000\n    vals$correct_cases <- vals$correct_cases + court_correct\n    vals$last_results <- NULL\n    vals$show_table <- FALSE\n    \n    if (!vals$initialized) {\n      toggle_elements(show_inputs = FALSE, show_reset = TRUE)\n      vals$initialized <- TRUE\n    }\n  })\n  \n  # --- Reset everything ---\n  observeEvent(input$reset, {\n    vals$total_cases <- 0\n    vals$correct_cases <- 0\n    vals$last_results <- NULL\n    vals$show_table <- FALSE\n    vals$initialized <- FALSE\n    vals$retired_info <- NULL\n    updateCheckboxInput(session, \"retire\", value = FALSE)\n    toggle_elements(show_inputs = TRUE, show_reset = FALSE)\n  })\n  \n  # --- Table output ---\n  output$table_ui <- renderUI({\n    if (vals$show_table && !is.null(vals$last_results)) {\n      tableOutput(\"resultsTable\")\n    }\n  })\n  \n  output$resultsTable <- renderTable({\n    vals$last_results\n  }, bordered = TRUE, align = \"lc\")\n  \n  # --- Summary text ---\n  output$summaryText <- renderText({\n    judges <- c(\"A\", \"B\", \"C\", \"D\", \"E\")\n    \n    if (vals$total_cases == 0) {\n      msg <- \"Press 'Simulate One Case' or 'Simulate 1000 Cases' to begin.\"\n      ret_judge <- judges[vals$retired_info$bottom]\n      if (input$retire) msg <- paste(msg, \"\\n(Judge \", ret_judge, \"has retired.)\")\n      return(msg)\n    }\n    \n    prop_correct <- round(vals$correct_cases / vals$total_cases, 3)\n    base_summary <- paste0(\n      \"Simulations so far: \", vals$total_cases, \"\\n\",\n      \"Court decided correctly in \", vals$correct_cases,\n      \" of these (proportion = \", prop_correct, \").\"\n    )\n    \n    # Show which judges were doubled/retired if applicable\n    retire_note <- \"\"\n    if (!is.null(vals$retired_info)) {\n      retire_note <- paste0(\n        \"\\n\\nRetirement rule active:\\n\",\n        \"  Judge \", judges[vals$retired_info$top], \" gets 2 votes.\\n\",\n        \"  Judge \", judges[vals$retired_info$bottom], \" is retired (0 votes).\"\n      )\n    }\n    \n    if (vals$show_table && !is.null(vals$last_results)) {\n      correct_votes <- sum(vals$last_results$Correct == \"Yes\")\n      court_correct <- correct_votes >= 3\n      case_summary <- paste0(\n        \"This case: \", correct_votes, \" judges voted correctly.\\n\",\n        if (court_correct) \"The court decided correctly.\" else \"The court decided incorrectly.\", \"\\n\\n\"\n      )\n      paste0(case_summary, base_summary, retire_note)\n    } else {\n      paste0(base_summary, retire_note)\n    }\n  })\n}\n\n# --- JavaScript for fade effects ---\njs <- \"\nShiny.addCustomMessageHandler('fadeElements', function(message) {\n  if(message.show_inputs){\n    $('#prob_inputs').fadeIn(500);\n  } else {\n    $('#prob_inputs').fadeOut(500);\n  }\n  if(message.show_reset){\n    $('#reset_div').fadeIn(500);\n  } else {\n    $('#reset_div').fadeOut(500);\n  }\n});\n$(document).ready(function(){\n  $('#reset_div').hide();\n});\n\"\n\nui <- tagList(\n  tags$head(tags$script(HTML(js))),\n  ui\n)\n\nshinyApp(ui = ui, server = server)\n","type":"text"}]
